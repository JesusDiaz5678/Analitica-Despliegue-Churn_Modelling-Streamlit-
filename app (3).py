# -*- coding: utf-8 -*-
"""4.Despliegue_Grafico_Churn_Modelling.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i4pxSGHM3ZdmCKMqlfYfWrT8Ox-V5xRO
"""

#Despliegue con HTML sin HTML

# Despliegue

#- Cargamos el modelo
#- Cargamos los datos futuros (Churn_Modelling-future.csv)
#- Preparar los datos futuros
#- Aplicamos el modelo para la predicción

#Importamos librerías básicas
import pandas as pd # manipulacion dataframes
import numpy as np  # matrices y vectores
import matplotlib.pyplot as plt #gráfica

#Importamos librerías básicas
import pandas as pd # manipulacion dataframes
import numpy as np  # matrices y vectores
import matplotlib.pyplot as plt #gráfica

#Cargamos el modelo
import pickle
filename = 'modeloTree-clas-hiper.pkl'
modelTree,labelencoder,variables = pickle.load(open(filename, 'rb'))

#Cargamos los datos futuros (SE COMENTAN LAS DOS LINEAS DESPUES DE ESTE COMENTARIO UNA VEZ CULMINADO TODO EL PROCESO)
#data = pd.read_excel("Churn_Modelling-future.xlsx")
#data.head()

#Se crea interfaz gráfica con streamlit para capturar los datos
# EJECUTAR AL FINAL
#Se crea interfaz gráfica con streamlit para captura de los datos

import streamlit as st

st.title('Predicción de riesgo de Salida de cliente Del Banco')

geography = st.selectbox('Geography', ['France', 'Spain','Germany'])
age = st.slider('Age', min_value=18, max_value=96, value=30, step=1)
gender = st.selectbox('Gender', ['Male', 'Female'])
balance = st.slider('Balance', min_value=0.0, max_value=350000.0, value=10000.0, step=10.0)
NumOfProducts = st.slider('NumOfProducts', min_value=1, max_value=4, value=1, step=1)
IsActiveMember = st.selectbox('IsActiveMember', ['Si', 'No'])

datos = [[geography, gender]]
data = pd.DataFrame(datos, columns=['Geography', 'Age', 'Gender', 'Balance', 'NumOfProducts', 'IsActiveMember']) #Dataframe con los mismos nombres de variables

#Se realiza la preparación debe ser igual al aprendizaje
data_preparada=data.copy()
data_preparada = pd.get_dummies(data_preparada, columns=['Geography',  'NumOfProducts'], drop_first=False, dtype=int) #Despliegue siempre drop_first en false
data_preparada = pd.get_dummies(data_preparada, columns=['Gender', 'IsActiveMember'], drop_first=True, dtype=int)
data_preparada.head()

"""**Predicciones**"""

#Hacemos la predicción con el Tree
Y_fut = modelTree.predict(data_preparada)
print(Y_fut)

# labelencoder
data['Tree']=labelencoder.inverse_transform(Y_fut)
data.head()

data